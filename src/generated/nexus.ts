/**
 * This file was automatically generated by GraphQL Nexus
 * Do not make changes to this file directly
 */

import * as prisma from "@prisma/client"



declare global {
  interface NexusGenCustomOutputProperties<TypeName extends string> {
    crud: NexusPrisma<TypeName, 'crud'>
    model: NexusPrisma<TypeName, 'model'>
  }
}

declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
  VehicleUpdateInput: { // input type
    createdAt?: any | null; // DateTime
    engine?: string | null; // String
    id?: string | null; // String
    image?: string | null; // String
    make?: string | null; // String
    model?: string | null; // String
    power?: string | null; // String
    price?: string | null; // String
    sixty?: string | null; // String
    topSpeed?: string | null; // String
    torque?: string | null; // String
    updatedAt?: any | null; // DateTime
    vtype?: string | null; // String
    weight?: string | null; // String
    year?: string | null; // String
  }
  VehicleWhereUniqueInput: { // input type
    id?: string | null; // String
  }
}

export interface NexusGenEnums {
}

export interface NexusGenRootTypes {
  Mutation: {};
  Query: {};
  Vehicle: prisma.Vehicle;
  String: string;
  Int: number;
  Float: number;
  Boolean: boolean;
  ID: string;
  DateTime: any;
}

export interface NexusGenAllTypes extends NexusGenRootTypes {
  VehicleUpdateInput: NexusGenInputs['VehicleUpdateInput'];
  VehicleWhereUniqueInput: NexusGenInputs['VehicleWhereUniqueInput'];
}

export interface NexusGenFieldTypes {
  Mutation: { // field return type
    createVehicle: NexusGenRootTypes['Vehicle']; // Vehicle!
    deleteOneVehicle: NexusGenRootTypes['Vehicle'] | null; // Vehicle
    updateOneVehicle: NexusGenRootTypes['Vehicle'] | null; // Vehicle
  }
  Query: { // field return type
    Vehicle: NexusGenRootTypes['Vehicle'] | null; // Vehicle
    Vehicles: NexusGenRootTypes['Vehicle'][]; // [Vehicle!]!
  }
  Vehicle: { // field return type
    createdAt: any; // DateTime!
    engine: string; // String!
    id: string; // String!
    image: string; // String!
    make: string; // String!
    model: string; // String!
    power: string; // String!
    price: string; // String!
    sixty: string; // String!
    topSpeed: string; // String!
    torque: string; // String!
    updatedAt: any; // DateTime!
    vtype: string; // String!
    weight: string; // String!
    year: string; // String!
  }
}

export interface NexusGenArgTypes {
  Mutation: {
    createVehicle: { // args
      engine?: string | null; // String
      image?: string | null; // String
      make: string; // String!
      model: string; // String!
      power?: string | null; // String
      price?: string | null; // String
      sixty?: string | null; // String
      topSpeed?: string | null; // String
      torque?: string | null; // String
      vtype?: string | null; // String
      weight?: string | null; // String
      year: string; // String!
    }
    deleteOneVehicle: { // args
      where: NexusGenInputs['VehicleWhereUniqueInput']; // VehicleWhereUniqueInput!
    }
    updateOneVehicle: { // args
      data: NexusGenInputs['VehicleUpdateInput']; // VehicleUpdateInput!
      where: NexusGenInputs['VehicleWhereUniqueInput']; // VehicleWhereUniqueInput!
    }
  }
  Query: {
    Vehicle: { // args
      id?: string | null; // ID
    }
    Vehicles: { // args
      searchString?: string | null; // String
    }
  }
}

export interface NexusGenAbstractResolveReturnTypes {
}

export interface NexusGenInheritedFields {}

export type NexusGenObjectNames = "Mutation" | "Query" | "Vehicle";

export type NexusGenInputNames = "VehicleUpdateInput" | "VehicleWhereUniqueInput";

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = "Boolean" | "DateTime" | "Float" | "ID" | "Int" | "String";

export type NexusGenUnionNames = never;

export interface NexusGenTypes {
  context: Context.Context;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  allTypes: NexusGenAllTypes;
  inheritedFields: NexusGenInheritedFields;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractResolveReturn: NexusGenAbstractResolveReturnTypes;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
}